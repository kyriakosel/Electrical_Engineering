%Variable Declaration
hour = 0:1:24;
f=1;
D=1-f; %D=1-f
Y = (1-D)*1300/12^2*(hour-12).^2+D*1300;
time = hour;
FourMonthData=repmat(Y,1,120);
% % % WeeklySunny=xlsread('June2016.xlsx');
% % % WeeklySunny=xlsread('February2016.xlsx');
% % % FourMonthData=xlsread('OctJanAprJuneData.xlsx');

LoadDemandLower=xlsread('LoadDemandSummer.xlsx');
LoadDemandHigher=xlsread('LoadDemandHigher.xlsx');
LoadDemand = repmat(LoadDemandLower,1,120) ;

temp=0;
x=1;
j=1;
%Average the data of the table
for i=1:length(FourMonthData)
    if x<4
        temp=(temp+FourMonthData(i));
        x=x+1;
    else
        AveragingOneHourData(j) = temp/4;
        temp=0;
        x=1;
        j=j+1;
        if j>length(FourMonthData)/4
            j=1;
        end
    end
end
 
%Calculate Charging and Discharging, Cumulative and New Cumulative Energy
%in Battery
for i=1:length(AveragingOneHourData)   
    Net(i)=AveragingOneHourData(i)-LoadDemand(i);
    if Net(i)<=0
        Discharging(i)=Net(i);
        Charging(i)=0;
    else
        Charging(i)=Net(i);
        Discharging(i)=0;
    end
    NetCharging(i)=.92*Charging(i)+Discharging(i);
    Cumulative(1)=Discharging(1);
    Cumulative(i+1)=Cumulative(i)+NetCharging(i); 
end
   % NewCumulative=[zeros(1,720)];
    NewCumulative(1)=0;%(min(Cumulative));
    Grid=0;
    SoldGrid=0;
    %Calculation of NewCumulative
    for i=1:length(FourMonthData)/4    
        NewCumulative(i+1)=NewCumulative(i)+NetCharging(i);
               if NewCumulative(i+1)>6500
                    Grid(i) =NewCumulative(i+1)-6500;
                    NewCumulative(i+1)=6500;
                    SoldGrid = SoldGrid + Grid(i);
               end
               if NewCumulative(i+1)<0
                    NewCumulative(i+1)=0;
               end      
    end
    %Calculation of Battery Charge Cycles within a month
% % % %     MaxPeaks=0;
% % % %     MinPeaks=0;
% % % %     Charge=0;
% % % %     for i =1:length(NewCumulative)/24
% % % %          MaxPeaks=findpeaks(NewCumulative);
% % % %          MinPeaks=-findpeaks(NewCumulative*(-1));
% % % %          Charge = [Charge (MaxPeaks(i)-MinPeaks(i))/MaxPeaks(i)];
% % % %     end
% % % %     BatteryCharge=0;
% % % %     for i=1:length(Charge)
% % % %         BatteryCharge=BatteryCharge+Charge(i);
% % % %     end
    
    
   %Calculation of Area Below 20% of capacity
   
       for i=1:length(NewCumulative)
           if NewCumulative(i)<(1300)
               SOC(i)= NewCumulative(i);
           elseif NewCumulative(i)>(1300)
               SOC(i)=1300;
           elseif NewCumulative(i)==(1300)
               SOC(i)=1300;
           end
       end
       %Calculating area above the SOC curve
%        for i=1:length(SOC)
%            AreaAboveCurve(i)=.2*6500-SOC(i);
%        end
       %Using Linear Interpolation to compare the value with the initial
       %1.1736e+04
       Area_268=    4.2837e+06;
       Area_402=    6.1783e+06;
       Area_536=    8.0731e+06;
       Area_67=     9967750;
       Area_1053=   11862500;
       
       %Calculating Degradation as the Area above SOC curve, which is below
       %20%
       %Degradation=sum(AreaAboveCurve)*12;
%         Degradation=sum(SOC(1:2953))*3;
      Degradation=sum(SOC)*3;
       %Comparing Degradation with the Linear Interpolation
       if Degradation<Area_402
           Gradient=(4.02-2.68)/(Area_402-Area_268);
           BatteryLife=Gradient*(Degradation-Area_268)+2.68;
       elseif Degradation<Area_536
           Gradient=(5.36-4.02)/(Area_536-Area_402);
           BatteryLife=Gradient*(Degradation-Area_402)+4.02;
       elseif Degradation<Area_67
           Gradient=(6.7-5.36)/(Area_67-Area_536);
           BatteryLife=Gradient*(Degradation-Area_536)+5.26;
       else
           Gradient=(10.53-6.7)/(Area_1053-Area_67);
           BatteryLife=Gradient*(Degradation-Area_67)+6.7;
       end
          
         %Battery Life Calculation 
         if BatteryLife<=2
% %              AdditionalBatteries=4;
% %              Year=[BatteryLife BatteryLife*2 BatteryLife*3 BatteryLife*4];
             for (i=BatteryLife:BatteryLife:10)
                 counter=counter+1;
             end
             AdditionalBatteries=counter;
             for i=1:AdditionalBatteries
                 Year(i)=
             
         elseif BatteryLife<=3
             AdditionalBatteries=3;
             Year =[BatteryLife BatteryLife*2 BatteryLife*3];
         elseif BatteryLife<=4
             AdditionalBatteries=2;
             Year=[BatteryLife BatteryLife*2];
         elseif BatteryLife<=9.99
             AdditionalBatteries=1;
             Year = [BatteryLife];
         else BatteryLife>=10
             AdditionalBatteries=0;
             Year=[0];
         end
     %Present Value Calculation for detecting the additional price
     % Present Value is PV = FV*(1+d)^n, where d is discount rate (0.08)and
     % n is years
     %PresentValue=FutureValue*(1+0.08)^n;
     InitialCost=3000; 
     d=0.08;
     z=length(Year);
     FV=[0];
     PV=0;
     if Year~=0;
        for x=1:z
             PV= InitialCost/(1+d)^Year(x);
             FV=[FV PV];
        end
     end
        ExcessCost=sum(FV);

        
%Creating a 100 DoD        
% hour = 0:1:24;
% f=1;
% D=1-f; %D=1-f
% Y = (1-D)*1300/12^2*(hour-12).^2+D*1300;
% time = hour;
% DepthOfDischarge = Y;
% for i = 1
%     time = [time i*24+hour];
%     DepthOfDischarge = [DepthOfDischarge Y];
% end;             
%        
%     figure(1);
%     plot(NewCumulative);
    
%     figure(2);
%     plot(Grid);
%     
%     figure(3);
%     plot(Charge);
    
    
for i=1:length(SOC)-1
    if SOC(i)~=0
        
            GridReplacement(i)=abs(SOC(i+1)-SOC(i));
        
    end
end
GridCostMonth = sum(GridReplacement)*.13/1000*1.0714; %1.0714 To compensate for 30 days instead of 28
GridCostTenYear = sum(GridReplacement)*.13/1000*1.0714*12*10;
        

%------------------Plots and Figures------------------
figure (1)
title('Battery New Cumulative Energy')
xlabel('time(h)')
ylabel('Power(W)')
% plot(NewCumulative(1:2953))
plot(NewCumulative)
figure (2)
title('Input Weather Data')
xlabel('time(h)')
ylabel('Power(W)')
plot(FourMonthData)


Degradation
ExcessCost
GridCostTenYear
BatteryLife
